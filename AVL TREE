//create avl
#include <bits/stdc++.h> 
using namespace std;
struct avlnode
{
    struct avlnode *left;
    int data ;
    struct avlnode *right;
    int height;
};

typedef struct avlnode node;

void preorder(node *root)
{
    if(root!=NULL)
    {
        cout<<root->data<<" ";
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(node *root)
{
    if(root!=NULL)
    {

        inorder(root->left);
        cout<<root->data<<" ";        
        inorder(root->right);
    }
}
void postorder(node *root)
{
    if(root!=NULL)
    {

        postorder(root->left);        
        postorder(root->right);
        cout<<root->data<<" ";        
    }
}

int height(node *n)
{
    if (n==NULL)
        return 0;
    return n->height;
}

node *rightrotate(node *y)
{
    node *x=y->left;
    node *t2=x->right;
    x->right=y;
    y->left=t2;
    y->height=max(height(y->left),height(y->right))+1;
    x->height=max(height(x->left),height(x->right))+1;
    return x;
}

node *leftrotation(node *x)
{
    node *y=x->right;
    node *t2=y->left;
    y->left=x;
    x->right=t2;
    x->height=max(height(x->left),height(x->right))+1;  
    y->height=max(height(y->left),height(y->right))+1;
    return y;  
}
node *newnode(int key)
{
    node *temp=(node *)malloc(sizeof(node));
    temp->data=key;
    temp->left=NULL;
    temp->right=NULL;
    temp->height=1;
    return (temp);
}
node *minvaluenode(node * root)
{
    node *current=root;
    while(current && current->left!=NULL)
        current=current->left;
    return current;
}
int getbalance(node *n)
{
    if (n==NULL)
        return 0;
    return height(n->left)-height(n->right);
}

node *insert(node *root,int key)
{
    if (root==NULL) return newnode(key);
    if (key<root->data) 
        root->left=insert(root->left,key);
    else if (key>root->data)
        root->right=insert(root->right,key);
    else
        return root;
    
    root->height=1+max(height(root->left),height(root->right));
    
    int balance=getbalance(root);
//LL problem
    if (balance > 1 && key < root->left->data)
        return rightrotate(root);
//RR problem
    if (balance < -1 && key > root->right->data)
        return leftrotation(root);
//LR Problem
    if (balance > 1 && key > root->left->data)
    {
        root->left = leftrotation(root->left);
        return rightrotate(root);
    }
// RL problem
    if (balance < -1 && key < root->right->data)
    {
        root->right = rightrotate(root->right);
        return leftrotation(root);
    }
    return root;    
}

node *deleteNode(node *root,int key)
{
    if (root == NULL) 
        return root; 

    if ( key < root->data ) 
        root->left = deleteNode(root->left, key); 

    else if( key > root->data ) 
        root->right = deleteNode(root->right, key);
    else
    {
      if( (root->left == NULL) || (root->right == NULL) ) 
        { 
            node *temp = root->left ? root->left : root->right; 
  
            // No child case 
            if (temp == NULL) 
            { 
                temp = root; 
                root = NULL; 
            } 
            else // One child case 
                *root = *temp; // Copy the content to non-empty child 
            free(temp); 
        } 
        else
        {
          node* temp = minvaluenode(root->right); 
            root->data = temp->data;  
            root->right = deleteNode(root->right, temp->data); 

        }
    }
    if (root == NULL) 
        return root; 
  
    root->height = 1 + max(height(root->left), 
                           height(root->right)); 
  

    int balance = getbalance(root); 

  
    // Left Left Case 
    if (balance > 1 && getbalance(root->left) >= 0) 
        return rightrotate(root); 
  
    // Left Right Case 
    if (balance > 1 && getbalance(root->left) < 0) 
    { 
        root->left = leftrotation(root->left); 
        return rightrotate(root); 
    } 
  
    // Right Right Case 
    if (balance < -1 && getbalance(root->right) <= 0) 
        return leftrotation(root); 
  
    // Right Left Case 
    if (balance < -1 && getbalance(root->right) > 0) 
    { 
        root->right = rightrotate(root->right); 
        return leftrotation(root);
    } 
  
    return root; 
}

int main() {
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    node a={NULL,50,NULL};
    node b={NULL,30,NULL};
    node c={NULL,70,NULL};
    node d={NULL,10,NULL};

    a.left=&b;
    a.right=&c;
    b.left=&d;
    
    node *head=&a;
    head=insert(head,100);
    head=insert(head,60);
    head=deleteNode(head,70);
    inorder(head);
    
    return 0;
}
