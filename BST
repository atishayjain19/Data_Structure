//create BST
#include <bits/stdc++.h> 
using namespace std;
struct bstnode
{
    struct bstnode *left;
    int data ;
    struct bstnode *right;
};

typedef struct bstnode node;

node *minvaluenode(node * root)
{
    node *current=root;
    while(current && current->left!=NULL)
        current=current->left;
    return current;
}

node *insert(node *root,int key)
{
    if (root==NULL)         //insertion occur at null place
    {
        node *temp=(node *)malloc(sizeof(node));
        temp->data=key;
        temp->left=temp->right=NULL;
        return temp;
    }
    if (key<root->data)
    {
        root->left=insert(root->left,key);
    }
    else if(key>root->data)
    {
        root->right=insert(root->right,key);
    }
    return root;
}

node *deletenode(node *root,int key)
{
    if(root==NULL)
        return root;
    if(key<root->data)
        root->left=deletenode(root->left,key);
    else if (key>root->data)
        root->right=deletenode(root->right,key);
    else
    {
        if (root->left==NULL)
        {
            node *temp=root->right;
            free(root);
            root=NULL;
            return temp;
        }
        else if(root->right==NULL)
        {
            node *temp=root->left;
            free(root);
            root=NULL;
            return temp;
        }
        node *temp=minvaluenode(root->right);
        root->data=temp->data;
        root->right=deletenode(root->right,temp->data);
    }
}

void preorder(node *root)
{
    if(root!=NULL)
    {
        cout<<root->data<<" ";
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(node *root)
{
    if(root!=NULL)
    {

        inorder(root->left);
        cout<<root->data<<" ";        
        inorder(root->right);
    }
}
void postorder(node *root)
{
    if(root!=NULL)
    {

        postorder(root->left);        
        postorder(root->right);
        cout<<root->data<<" ";        
    }
}
int main() {
    //freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    node a={NULL,50,NULL};
    node b={NULL,30,NULL};
    node c={NULL,70,NULL};
    node d={NULL,10,NULL};

    a.left=&b;
    a.right=&c;
    b.left=&d;
    
    node *head=&a;
    insert(head,100);
    //deletenode(head,50);
    inorder(head);
    
    return 0;
}
